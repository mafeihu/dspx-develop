<?php
namespace app\api\controller;
use think\Controller;
use think\Db;
use think\Request;
class User extends Common{
    public function  _initialize(){
        parent::_initialize(); // TODO: Change the autogenerated stub
    }
    /**
     * 获取用户信息
     */
    public function user_info(){
        if (Request::instance()->isPost()) {
            //待优化
            $user = $this->checklogin();
            $user['header_img'] = $user['header_img'];
            $user['follow'] = DB::name('Follow')->alias('a')
                ->join('th_member b','a.user_id2 = b.member_id')
                ->where(['a.user_id' => $user['member_id'],'a.is_delete'=>'1','b.is_del'=>'1'])->count();
            $user['follow_to'] = DB::name('Follow')->alias('a')
                ->join('th_member b','a.user_id = b.member_id')
                ->where(['a.user_id2' => $user['member_id'],'a.is_delete'=>'1','b.is_del'=>'1'])->count();
            $user['live_count'] = DB::name('Live_store')->where(['user_id' => $user['member_id'], 'is_del' => 1])->count();
            $userinfo = DB::name("merchants")->where("member_id", $user["member_id"])->find();
            if (!$userinfo) {
                $user["apply_state"] = '0';
            } else {
                $user["apply_state"] = $userinfo["apply_state"];
            }
            //商家状态
            $userinfo['pay_state'] ? $user["pay_state"] = $userinfo["pay_state"] : $user["pay_state"] = '0';
            //今日收益
            $user["today_earnings"] = (string)(DB::name("give_gift")->where(["user_id2" => $user["member_id"], "date" => date("Y-m-d",time())])->sum("e_ticket"));
            //昨日收益
            $user["yesterday_earnings"] = (string)(DB::name("give_gift")->where(["user_id2" => $user["member_id"], 'date' => date("Y-m-d", strtotime("-1 day"))])->sum("e_ticket"));
            //本月收益
            $this_month = strtotime(date("Y-m",time()));
            $user["month_earnings"] = (string)(DB::name("give_gift")->where(['date'=>['gt',$this_month],'user_id2'=>$user['member_id']])->sum("e_ticket"));
            $get_count = DB::name('Give_gift')->where(['user_id2' => $user['member_id']])->sum('e_ticket');
            $get_count ? $user['get_count'] = (string)$get_count : $user['get_count'] = "0";
            //送出
            $give_count = DB::name('Give_gift')->where(['user_id' => $user['member_id']])->sum('jewel');
            $give_count ? $user['give_count'] = (string)$give_count : $user['give_count'] = "0";


            //待支付订单
            $user['wait_count'] = (string)(Db::name('order_merchants')->alias('a')
                ->join('th_merchants b', 'a.merchants_id = b.member_id')
                ->where(['a.is_delete'=>'0','a.member_id'=>$user['member_id'],'a.order_state'=>'wait_pay'])
                ->count());
            $user['seed_count'] = (string)(Db::name('order_merchants')->alias('a')
                ->join('th_merchants b', 'a.merchants_id = b.member_id')
                ->where(['a.is_delete'=>'0','a.member_id'=>$user['member_id'],'a.order_state'=>'wait_send'])
                ->count());
            $user['receive_count'] = (string)(Db::name('order_merchants')->alias('a')
                ->join('th_merchants b', 'a.merchants_id = b.member_id')
                ->where(['a.is_delete'=>'0','a.member_id'=>$user['member_id'],'a.order_state'=>'wait_receive'])
                ->count());
            $user['assessment_count'] = (string)(Db::name('order_merchants')->alias('a')
                ->join('th_merchants b', 'a.merchants_id = b.member_id')
                ->where(['a.is_delete'=>'0','a.member_id'=>$user['member_id'],'a.order_state'=>'wait_assessment'])
                ->count());
            $user['returns_count'] = (string)(Db::name('order_refund')->where(['is_delete'=>'0','member_id'=>$user['member_id']])->count());
//        $authen = M('User_authen')->where(['user_id'=>$user['user_id']])->find();
//        if ($authen){
//            $user['is_authen'] = $authen['status'];
//        }else{
//            $user['is_authen'] = "-1";
//        }
            success($user);
        }
    }
    /**
     * @编辑个人资料
     */
    public function edit_user(){
        if (Request::instance()->isPost()) {
            $user = $this->checklogin();
            $params = Request::instance()->request();
            empty($params["header_img"]) ? true : $data["header_img"] = $params["header_img"];
            empty($params["username"]) ? true : $data["username"] = $params["username"];
            empty($params["sex"]) ? true : $data["sex"] = $params["sex"];
            empty($params["birth_day"]) ? true : $data["birth_day"] = $params["birth_day"];
            empty($params["province"]) ? true : $data["province"] = $params["province"];
            empty($params["city"]) ? true : $data["city"] = $params["city"];
            empty($params["area"]) ? true : $data["area"] = $params["area"];
            empty($params["signature"]) ?  true : $data["signature"] = $params["signature"];
            if (!empty($username)) {
                $user = DB::name('member')->where(['username' => $username])->find();
                if ($user) {
                    error('昵称已存在!');
                }
            }
            //待处理
            $data['uptime'] = time();
            $old_img = DB::name('member')->where(['member_id' => $user['member_id']])->value('header_img');
            if (DB::name('member')->where(['member_id' => $user['member_id']])->update($data)) {
                //bug(旧文件的删除
                $imgs = DB::name('member')->where(['member_id' => $user['member_id']])->value('header_img');
                success($imgs);
            } else {
                error('失败!');
            }
        }
    }

    /**
     *@充值列表
     */
    public function price_list(){

        $user = $this->checklogin();
        $list = Db::name('PriceList')->order("price asc")->select();
        if (!$list){$list=[];}
        success(['amount'=>$user['b_diamond'],'list'=>$list]);
    }

    /**
     *@充值记录
     */
    public function recharge_record()
    {
        if (Request::instance()->isPost()) {
            $member = $this->checklogin();
            $map['member_id'] = $member['member_id'];
            $map['pay_state'] = '2';
            $p = input('p');
            empty($p) && $p = 1;
            $pagesize = input('pagesize');
            $pagesize ? $pagesize : $pagesize = 10;
            $count = Db::name('Recharge')->where($map)->count();
            $page = ceil($count / $pagesize);
            $data = Db::name('Recharge')->field('amount,uptime,pay_type,meters,zeng')
                ->where($map)->limit(($p - 1) * $pagesize, $pagesize)->select();
            foreach($data as &$val){
                switch($val['pay_type']){
                    case 'wx':
                        $val['pay_type'] = '微信';
                        break;
                    case 'alipay':
                        $val['pay_type'] = '支付宝';
                        break;
                    case 'uppay':
                        $val['pay_type'] = '银联';
                        break;
                    case 'online':
                        $val['pay_type'] = '后台';
                        break;
                    case 'applepay':
                        $val['pay_type'] = '苹果内购';
                        break;
                }
                $val['meters'] = (string)($val['meters'] + $val['zeng']);
                $val['title'] = '充值'.$val['amount'].'元,获得'.$val['meters'].'钻石';
            }
            success(['page' => $page,'data' => $data]);
        }

    }

    /**
     * @关注（取消关注）

     */
    public function follow_merchants(){
        $user = $this->checklogin();
        $user_id2 = input('user_id2');
        if(!$user_id2)      error("参数错误");
        if ($user["member_id"] == $user_id2) error("传值错误");
        $check = Db::name('follow_merchants')->where(['user_id' => $user['member_id'], 'user_id2' => $user_id2])->find();
        if ($check) {
            if ($check['is_delete'] == '1') {
                $update['is_delete'] = '2';
                $action = '成功!';

            } else {
                $update['is_delete'] = '1';
                $action = '关注成功!';
            }
            $update['uptime'] = time();
            $result = Db::name('follow_merchants')->where(['follow_id' => $check['follow_id']])->update($update);
            if ($result) {
                success($action);
            } else {
                error("操作失败");
            }
        } else {
            $data['user_id'] = $user['member_id'];
            $data['user_id2'] = $user_id2;
            $data['intime'] = time();
            $result = Db::name('follow_merchants')->insert($data);
            if ($result) {
                success('关注成功!');
            } else {
                error("失败");
            }
        }
    }

    /**
     *@用户关注列表
     */
    public function user_follow(){
        $member = $this->checklogin();
        $p = input('p');
        $p  ?   $p  :   $p = 1;
        $pagesize = input('pagesize');
        $pagesize   ?   $pagesize   :   $pagesize = 10;
        $where = [
            'a.user_id' =>  $member['member_id'],
            'a.is_delete'   =>  '1',
            'b.is_delete'   => '0'
        ];
        $count = Db::name('follow_merchants')->alias('a')
            ->join('th_merchants b','a.user_id2 = b.member_id')
            ->where($where)->count();
        $list =  Db::name('follow_merchants')->alias('a')
            ->field('a.follow_id,b.member_id,b.live_id,b.merchants_name,b.merchants_img,b.merchants_content,b.month_sales')
            ->join('th_merchants b','a.user_id2 = b.member_id')
            ->where($where)->order("a.intime desc")
            ->limit(($p-1)*$pagesize,$pagesize)->select();
        $page = ceil($count/$pagesize);
        success(['page'=>$page,'list'=>$list]);
    }

    /**
     *@取消关注
     */
    public function del_user_follow(){
        $member = $this->checklogin();
        $follow_id = input('follow_id');
        if(!$follow_id)         error("参数错误");
        $result = Db::name('follow_merchants')->where(['user_id'=>$member['member_id'],'follow_id'=>$follow_id])->update(['is_delete'=>'2','uptime'=>time()]);
        if($result){
            success("操作成功");
        }else{
            error("操作失败");
        }
    }

    /**
     *@取消关注
     */
    public function del_all_follow(){
        $member = $this->checklogin();
        $result = Db::name('follow_merchants')->where(['user_id'=>$member['member_id']])->update(['is_delete'=>'2','uptime'=>time()]);
        if($result){
            success("操作成功");
        }else{
            error("操作失败");
        }
    }

    /**
     *@判断是否有未读消息
     */
    public function has_message(){
        $member = $this->checklogin();
        $map[]=['exp','FIND_IN_SET('.$member['type'].',object)'];
        $map['is_delete'] = '0';
        $map['state'] = '2';
        $check = Db::name('Message')->where(['type'=>'1','member_id'=>$member['member_id']])->column('system_notice_id');
        $notice = Db::name('system_notice')->where($map)->column('id');
        $list = array_diff($notice,$check);
        if($list){
            $intime = date("Y-m-d H:i:s",time());
            foreach ($list as $v){
                $message[]=[
                    'type' => '1',
                    'member_id' =>  $member['member_id'],
                    'system_notice_id'   =>  $v,
                    'intime'    => $intime
                ];
            }
            if($message){
                Db::name('message')->insertAll($message);
            }
            success('1');
        }else{
            $count = Db::name('message')->where(['member_id'=>$member['member_id'],'is_read'=>'1'])->count();
            if($count){
                success('1');
            }else{
                success('2');
            }
        }
    }

    public function message(){
        $member = $this->checklogin();
        $type = input('type');
        $p = input('p');
        $p  ?   $p  :   $p = 1;
        $pagesize = input('pagesize');
        $pagesize   ?   $pagesize   :   $pagesize = 10;
        $type ?    $type = $type    :   $type = 1;
        switch ($type){
            case 1://系统消息
                $map['a.member_id'] = $member['member_id'];
                $map['a.type'] = '1';
                $map['b.is_delete'] = '0';
                $count = Db::name('Message')->alias('a')
                       ->join('th_system_notice b','a.system_notice_id = b.id')
                       ->where($map)->count();
                $page = ceil($count/$pagesize);
                $list = Db::name('Message')->alias('a')
                    ->field('a.intime,a.order_id,b.content as message,b.title')
                    ->join('th_system_notice b','a.system_notice_id = b.id')
                    ->where($map)->limit(($p-1)*$pagesize,$pagesize)
                    ->select();
                if(!empty($list)){
                    Db::name('message')->where(['member_id'=>$member['member_id'],'type'=>1])->update(['is_read'=>'2']);
                }
                break;
            case 2://订单消息
                $map['member_id'] = $member['member_id'];
                $map['type'] = '2';
                $count = Db::name('message')->where($map)->count();
                $page = ceil($count/$pagesize);
                $list = Db::name('message')->field('message,intime,order_id')
                    ->where($map)->limit(($p-1)*$pagesize,$pagesize)->order('intime desc')->select();
                if(!empty($list)){
                    Db::name('message')->where($map)->update(['is_read'=>'2']);
                    foreach ($list as $k=>$v){
                        $list[$k]['goods'] = Db::name('order_goods')->alias('a')
                            ->field('a.*,b.order_no')
                            ->join('th_order_merchants b','a.order_merchants_id = b.order_merchants_id')
                            ->where(['a.order_merchants_id'=>$v['order_id']])->limit(1)->find();
                    }
                }
                break;
            case 3://其他消息
                $map['member_id'] = $member['member_id'];
                $map['type'] = '3';
                $count = Db::name('message')->where($map)->count();
                $page = ceil($count/$pagesize);
                $list = Db::name('message')->field('message,intime,order_id')
                    ->where($map)->limit(($p-1)*$pagesize,$pagesize)->order('intime desc')->select();
                if(!empty($list)){
                    Db::name('message')->where($map)->update(['is_read'=>'2']);
                }
                break;
        }
        success(['page'=>$page,'list'=>$list]);

    }

    /**
     *@反馈信息
     */
    public function feedback(){
        if(Request::instance()->isPost()){
            $member = $this->checklogin();
            $data['content'] = input('content');
            if(empty($data['content']))        error("反馈信息不能为空");
            $data['intime'] = date("Y-m-d H:i:s",time());
            $data['member_id'] = $member['member_id'];
            $result = Db::name('Feedback')->insert($data);
            if($result){
                success("反馈成功");
            }else{
                error("反馈失败");
            }
        }
    }


    public function is_this(){
        $version = input('version');
        empty($version) ? error('参数错误!') : true;
        $ve = Db::name('System')->where(['id'=>1])->value('ios_version');
        if ($ve==$version){
            $result = "1";
        }else{
            $result = "2";
        }
        success($result);
    }

    /**
     *@优惠券领券中心
     */
    public function coupon(){
        $uid = input('uid');
        $p = input('p');
        empty($p) && $p = 1;
        $pagesize = input('pagesize');
        $pagesize ? $pagesize : $pagesize = 10;
        $where['is_delete'] = '0';
        $where['status'] = '2';
        $where['end_strtotime'] = ['gt',time()];
        $count = Db::name('Coupon')->where($where)->count();
        $list = Db::name('Coupon')->field('coupon_id,title,start_time,end_time,value,balance,number,goods_id,type,merchants_id')
              ->where($where)->order('intime desc')->select();
        $page = ceil($count/$pagesize);
        if(!empty($uid)) {
            $member_coupon = Db::name('member_coupon')->where(['member_id' => $uid])->column('coupon_id');
        }else{
            $member_coupon = [];
        }
        foreach($list as $k=>$v){
            if($v['type'] == 2){
                $merchants = Db::name('merchants')->where(['member_id'=>$v['merchants_id']])->find();
                $list[$k]['merchants_name'] = $merchants['merchants_name'];
                $list[$k]['merchants_img'] = $merchants['merchants_img'];
            }else{
                $list[$k]['name'] = '通用优惠券';
                $list[$k]['merchants_name'] = '';
                $list[$k]['merchants_img'] = '';
            }
            if(in_array($v['coupon_id'],$member_coupon)){
                $list[$k]['is_check'] = '1';
            }else{
                $list[$k]['is_check'] = '2';
            }
        }
        success(['page'=>$page,'list'=>$list]);

    }

    /**
     *@领取优惠券
     */
    public function draw_coupon(){
        if(Request::instance()->isPost()){
            $member = $this->checklogin();
            $coupon_id = input('coupon_id');
            if(empty($coupon_id))          error("参数错误");
            $coupon = Db::name('Coupon')->where(['coupon_id'=>$coupon_id])->find();
            if(!$coupon)                   error('参数错误');
            if($coupon['balance']>=$coupon['number'])    error("该优惠券没有库存");
            $map['coupon_id'] = $coupon_id;
            $map['member_id'] = $member['member_id'];
            $check = Db::name('MemberCoupon')->where($map)->find();
            if($check)                  error("已领取，不能重复领取");
            $data['coupon_id'] = $coupon_id;
            $data['member_id'] = $member['member_id'];
            $data['intime'] = date("Y-m-d H:i:s",time());
            $result = Db::name('MemberCoupon')->insert($data);
            if($result){
                if($coupon['number']>$coupon['balance']){
                    Db::name('Coupon')->where(['coupon_id'=>$coupon_id])->setInc('balance');
                }
                success("领取成功");
            }else{
                error("领取失败");
            }
        }
    }
    /**
     *@优惠券
     * @param $status 1未使用；2已使用；3已过期
     */
    public function my_coupon()
    {
        $member = $this->checklogin();
        $status = input('status');
        $status ? $status : $status = '1';
        $data = Db::name('MemberCoupon')->alias('a')
            ->field('a.intime,b.end_time,b.end_strtotime,a.id')
            ->join('th_coupon b', 'a.coupon_id = b.coupon_id')
            ->where(['a.member_id' => $member['member_id'], 'a.status' => '1', 'b.is_delete' => '0', 'b.status' => '2'])->select();
        foreach ($data as $key => $val) {
            if (time() > $val['end_strtotime']) {
                Db::name('MemberCoupon')->where(['id' => $val['id']])->update(['status' => 3]);
            }
        }
        $p = input('p');
        empty($p) && $p = 1;
        $pagesize = input('pagesize');
        $pagesize ? $pagesize : $pagesize = 10;
        $count = Db::name('MemberCoupon')->alias('a')
            ->field('a.id,b.title,b.img,b.limit_value,b.value,b.start_time,b.end_time,b.type,b.merchants_id')
            ->join('th_coupon b', 'a.coupon_id = b.coupon_id')
            ->where(['a.member_id' => $member['member_id'], 'a.status' => $status, 'b.is_delete' => '0', 'b.status' => '2'])
            ->count();
        $list = Db::name('MemberCoupon')->alias('a')
            ->field('a.id,b.title,b.img,b.limit_value,b.value,b.start_time,b.end_time,b.type,b.merchants_id')
            ->join('th_coupon b', 'a.coupon_id = b.coupon_id')
            ->where(['a.member_id' => $member['member_id'], 'a.status' => $status, 'b.is_delete' => '0', 'b.status' => '2'])
            ->order('a.intime desc')->limit(($p - 1) * $pagesize, $pagesize)->select();
        $page = ceil($count / $pagesize);
        if (!empty($list)) {
            foreach ($list as $k => $v) {
                if ($v['type'] == 2) {
                    $merchants = Db::name('merchants')->where(['member_id' => $v['merchants_id']])->find();
                    $list[$k]['merchants_name'] = $merchants['merchants_name'];
                    $list[$k]['merchants_img'] = $merchants['merchants_img'];
                } else {
                    $list[$k]['name'] = '通用优惠券';
                    $list[$k]['merchants_name'] = '';
                    $list[$k]['merchants_img'] = '';
                }
            }
        }
        success(['page'=>$page,'list'=>$list]);
    }


    /**
     *@确认订单优惠券
     */

     public function confirm_coupon(){
         $member = $this->checklogin();
         $amount = input('amount');
         if(!$amount)           error("参数错误");
         $merchants = input('merchants');
         //!empty($merchants)   &&      $map['merchants_id'] = ['in',$merchants];
         $data = Db::name('MemberCoupon')->alias('a')
             ->field('a.intime,b.end_time,b.end_strtotime,a.id')
             ->join('th_coupon b','a.coupon_id = b.coupon_id')
             ->where(['a.member_id'=>$member['member_id'],'a.status'=>'1','b.is_delete'=>'0','b.status'=>'2'])->select();
         foreach($data as $key=>$val){
             if(time()>$val['end_strtotime']){
                 Db::name('MemberCoupon')->where(['id'=>$val['id']])->update(['status'=>3]);
             }
         }
         $map['a.member_id'] = $member['member_id'];
         $map['a.status']    = '1';
         $map['b.is_delete'] = '0';
         $map['b.status'] = '2';
         $map['b.limit_value'] = ['elt',$amount];
         $list = Db::name('MemberCoupon')->alias('a')
             ->field('a.id,b.title,b.img,b.limit_value,b.value,b.start_time,b.end_time,b.type,b.merchants_id')
             ->join('th_coupon b', 'a.coupon_id = b.coupon_id')
             ->where($map)->order('a.intime desc')->select();
         if (!empty($list)) {
             foreach ($list as $k => $v) {
                 if ($v['type'] == 2) {
                     $merchants = Db::name('merchants')->where(['member_id' => $v['merchants_id']])->find();
                     $list[$k]['merchants_name'] = $merchants['merchants_name'];
                     $list[$k]['merchants_img'] = $merchants['merchants_img'];
                 } else {
                     $list[$k]['name'] = '通用优惠券';
                     $list[$k]['merchants_name'] = '';
                     $list[$k]['merchants_img'] = '';
                 }
             }
         }
         success($list);
     }

     public function user_profit(){
         $member = $this->checklogin();
         $last_month = strtotime("-1 month");//
         $month_first = date("Y-m-01 00:00:00",time());//这个月第一天
         $last_month_first = date("Y-m-01 00:00:00",$last_month);//上个月第一天
         //上月汇总
         $order_map = ['in',['wait_send','wait_receive','wait_assessment','end']];
         $last_order_merchants = Db::name('order_goods')->alias('a')
             ->field('a.goods_id,a.specification_price,a.goods_num,b.order_actual_price,b.goods_total_price,b.order_merchants_id,a.sale_ratio')
             ->join('th_order_merchants b','a.order_merchants_id = b.order_merchants_id','left')
             ->where(['a.create_time'=>['between',[$last_month_first,$month_first]],'a.seller'=>$member['member_id'],'b.order_state'=>$order_map,'a.sale_ratio'=>['neq','']])
             ->select();
         $last_settlement_count = 0;//总金额
         foreach ($last_order_merchants as $k=>$v){
             $last_settlement_count += sprintf('%.2f',$v['order_actual_price']*$v['specification_price'] * $v['goods_num']/$v['goods_total_price']*$v['sale_ratio']);

         }

         $last_settlement = Db::name('order_settlement')//结算金额
             ->where(['type'=>'2','merchant_id'=>$member['member_id'],'create_time'=>['between',[$last_month_first,$month_first]]])->sum('settlement_price');
         $last_not_settlement = $last_settlement_count - $last_settlement;//未结算

         //这月汇总
         $order_merchants = Db::name('order_goods')->alias('a')
             ->field('a.goods_id,a.specification_price,a.goods_num,b.order_actual_price,b.goods_total_price,b.order_merchants_id,a.sale_ratio')
             ->join('th_order_merchants b','a.order_merchants_id = b.order_merchants_id','left')
             ->where(['a.create_time'=>['gt',$month_first],'a.seller'=>$member['member_id'],'b.order_state'=>$order_map,'a.sale_ratio'=>['neq','']])
             ->select();
         $settlement_count = 0;//总金额
         foreach ($order_merchants as $k=>$v){
             $settlement_count += sprintf('%.2f',$v['order_actual_price']*$v['specification_price'] * $v['goods_num']/$v['goods_total_price']*$v['sale_ratio']);

         }

         $settlement = Db::name('order_settlement')//结算金额
         ->where(['type'=>'2','merchant_id'=>$member['member_id'],'create_time'=>['gt',$month_first]])->sum('settlement_price');
         $not_settlement = $settlement_count - $settlement;//未结算

         //昨日汇总
         $last_day = strtotime("-1 day");//
         $last_day_first = date("Y-m-d 00:00:00",$last_day);
         $last_day_end = date("Y-m-d 00:00:00",time());
         $last_day_order_merchants = Db::name('order_goods')->alias('a')
             ->field('a.goods_id,a.specification_price,a.goods_num,b.order_actual_price,b.goods_total_price,b.order_merchants_id,a.sale_ratio')
             ->join('th_order_merchants b','a.order_merchants_id = b.order_merchants_id','left')
             ->where(['a.create_time'=>['between',[$last_day_first,$last_day_end]],'a.seller'=>$member['member_id'],'b.order_state'=>$order_map,'a.sale_ratio'=>['neq','']])
             ->select();
         $last_day_settlement_count = 0;//总金额
         foreach ($last_day_order_merchants as $k=>$v){
             $last_day_settlement_count += sprintf('%.2f',$v['order_actual_price']*$v['specification_price'] * $v['goods_num']/$v['goods_total_price']*$v['sale_ratio']);

         }
         $last_day_settlement = Db::name('order_settlement')//结算金额
         ->where(['type'=>'2','merchant_id'=>$member['member_id'],'create_time'=>['between',[$last_day_first,$last_day_end]]])->sum('settlement_price');
         $last_day_not_settlement = $last_day_settlement_count - $last_day_settlement;//未结算

         //今天汇总
         $order_merchants = Db::name('order_goods')->alias('a')
             ->field('a.goods_id,a.specification_price,a.goods_num,b.order_actual_price,b.goods_total_price,b.order_merchants_id,a.sale_ratio')
             ->join('th_order_merchants b','a.order_merchants_id = b.order_merchants_id','left')
             ->where(['a.create_time'=>['gt',$last_day_end],'a.seller'=>$member['member_id'],'b.order_state'=>$order_map,'a.sale_ratio'=>['neq','']])
             ->select();
         $today_settlement_count = 0;//总金额
         foreach ($order_merchants as $k=>$v){
             $today_settlement_count += sprintf('%.2f',$v['order_actual_price']*$v['specification_price'] * $v['goods_num']/$v['goods_total_price']*$v['sale_ratio']);

         }

         $today_settlement = Db::name('order_settlement')//结算金额
         ->where(['type'=>'2','merchant_id'=>$member['member_id'],'create_time'=>['gt',$last_day_end]])->sum('settlement_price');
         $today_not_settlement = $today_settlement_count - $today_settlement;//未结算

        success(['last_settlement_count'=>sprintf('%.2f',$last_settlement_count),'last_settlement'=>sprintf('%.2f',$last_settlement),'last_not_settlement'=>sprintf('%.2f',$last_not_settlement),
        'settlement_count'=>sprintf('%.2f',$settlement_count),'settlement'=>sprintf('%.2f',$settlement),'not_settlement'=>sprintf('%.2f',$not_settlement),
        'last_day_settlement_count'=>sprintf('%.2f',$last_day_settlement_count),'last_day_settlement'=>sprintf('%.2f',$last_day_settlement),'last_day_not_settlement'=>sprintf('%.2f',$last_day_not_settlement),
        'today_settlement_count'=>sprintf('%.2f',$today_settlement_count),'today_settlement'=>sprintf('%.2f',$today_settlement),'today_not_settlement'=>sprintf('%.2f',$today_not_settlement)]);
     }

     public function settlement_order(){
          $member = $this->checklogin();
          $p = input('p');
          empty($p) && $p = 1;
          $pagesize = input('pagesize');
          $pagesize ? $pagesize : $pagesize = 10;
          $order_map = ['in',['wait_send','wait_receive','wait_assessment','end']];
          $count = Db::name('order_goods')->alias('a')
              ->join('th_order_merchants b','a.order_merchants_id = b.order_merchants_id','left')
              ->count();
          $page = ceil($count/$pagesize);
          if($page) {
              $list = Db::name('order_goods')->alias('a')
                  ->field('a.goods_id,a.specification_price,a.goods_num,a.goods_name,a.goods_img,
                  b.order_actual_price,b.goods_total_price,b.order_merchants_id,a.sale_ratio,a.seller,b.order_no')
                  ->join('th_order_merchants b', 'a.order_merchants_id = b.order_merchants_id', 'left')
                  ->where(['a.seller' => $member['member_id'], 'b.order_state' => $order_map, 'a.sale_ratio' => ['neq', '']])
                  ->order('a.create_time desc')->limit(($p - 1) * $pagesize, $pagesize)
                  ->select();
          }else{
             $list = [];
          }
          success(['page'=>$page,'list'=>$list]);
     }


}